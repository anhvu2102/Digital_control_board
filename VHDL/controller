
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


entity Controller is
Port(
i_theta: in std_logic_vector(7 downto 0);
i_RX_DV: in std_logic;
i_clk: in std_logic;
i_status_transfer: in std_logic;

o_arr_S0: out std_logic_vector(9 downto 0);
o_arr_S1: out std_logic_vector(9 downto 0);
o_arr_S2: out std_logic_vector(9 downto 0);
o_arr_S3: out std_logic_vector(9 downto 0);

o_led_blink: out std_logic:='0';

o_arr_dv: out std_logic:='0';
o_de_ADD: out integer range 0 to 4;

o_led_ready: out std_logic
);

end Controller;

architecture Behavioral of Controller is
type diode_sector_array is array(4 downto 0) of std_logic_vector(9 downto 0); 
signal arr_S0,arr_S1,arr_S2,arr_S3: diode_sector_array;
signal r_arr_S0, r_arr_S1,r_arr_S2,r_arr_S3: std_logic_vector(9 downto 0);

signal r_de_ADD: integer range 0 to 4;
signal r_arr_dv: std_logic:='0';
--signal r_theta: std_logic_vector(7 downto 0);

type t_SM_tf_S is (s_Idle,s_gen_arr, s_R0, s_R1, s_R2, s_R3, s_R4);
signal w_SM: t_SM_tf_S:= s_Idle;

begin

TRANS_SEC: process(i_clk)
variable check_tf: integer:=0;
variable i: integer range 0 to 6000000;
begin
if rising_edge (i_clk) then
    case w_SM is
        when s_Idle =>
            r_arr_S0<="0000000000";
            r_arr_S1<="0000000000";
            r_arr_S2<="0000000000";
            r_arr_S3<="0000000000";
            r_arr_dv<='0';
            r_de_ADD<=0;
            o_led_ready<='1';
            
            if i_RX_DV='1' then
                w_SM<=s_gen_arr;
                o_led_ready<='0';
              
            end if;
        when s_gen_arr =>
            if i_theta="00000000" then
                arr_S0<=(  ("0111001110"),("1011001101"),("1100000011"),("0100000010"),("1000000001"));
                arr_S1<=(  ("1001111001"),("1000110001"),("1011001101"),("0001111000"),("0010000100")); 
                arr_S2<=(  ("0001111000"),("0010000100"),("1000110001"),("1011001101"),("1000000001"));
                arr_S3<=(  ("1001111001"),("1100000011"),("0100000010"),("0111001110"),("1011001101"));             
                
            elsif i_theta=X"0F" then --15
                arr_S0<=(  ("1011100000"),("1001100000"),("0011000000"),("0101011110"),("0110001110"));
                arr_S1<=(  ("1010110001"),("0100011111"),("1001100000"),("0100111111"),("1101001100")); 
                arr_S2<=(  ("0100111111"),("1101001100"),("0100011111"),("1001100000"),("0110001110"));
                arr_S3<=(  ("1010110001"),("0011000000"),("0101011110"),("1011100000"),("1001100000")); 
                          
            elsif i_theta=X"1E" then --30
                arr_S0<=(  ("0101100011"),("1100101100"),("1101001111"),("0111010001"),("1011011111"));
                arr_S1<=(  ("0001100111"),("1010011000"),("1100101000"),("1010011000"),("1110101000")); 
                arr_S2<=(  ("1010011000"),("1110101000"),("1010011000"),("1100101000"),("1011011111"));
                arr_S3<=(  ("0001100111"),("1101001111"),("0111010001"),("0101100011"),("1100101100"));       
                
            elsif i_theta=X"2D" then --45
                arr_S0<=(  ("1010100110"),("1111101010"),("0101001100"),("0000010101"),("0101011000"));
                arr_S1<=(  ("1111001011"),("0101010001"),("1111100110"),("0110010001"),("1100110110")); 
                arr_S2<=(  ("0110010001"),("1100110110"),("0101010001"),("1111100110"),("0101011000"));
                arr_S3<=(  ("1111001011"),("0101001100"),("0000010101"),("1010100110"),("1111101010"));
                
            elsif i_theta=X"3C" then --60
                arr_S0<=(  ("1010101100"),("0011100101"),("1011001001"),("0110011010"),("1101010011"));
                arr_S1<=(  ("1000000101"),("0101010011"),("0011110101"),("0101010111"),("0011110011")); 
                arr_S2<=(  ("0101010111"),("0011110011"),("0101010011"),("0011110101"),("1101010011"));
                arr_S3<=(  ("1000000101"),("1011001001"),("0110011010"),("1010101100"),("0011100101"));
          
            else 
                arr_S0<=(  ("1111111111"),("1111111111"),("1111111111"),("1111111111"),("1111111111"));
                arr_S1<=(  ("1111111111"),("1111111111"),("1111111111"),("1111111111"),("1111111111")); 
                arr_S2<=(  ("1111111111"),("1111111111"),("1111111111"),("1111111111"),("1111111111"));
                arr_S3<=(  ("1111111111"),("1111111111"),("1111111111"),("1111111111"),("1111111111"));    
            end if;   
            w_SM<=s_R0;
         
         when s_R0 =>
            r_arr_S0<=arr_S0(4);
            r_arr_S1<=arr_S1(4);
            r_arr_S2<=arr_S2(4);
            r_arr_S3<=arr_S3(4);
            r_de_ADD<=0;
            
            if i_status_transfer='0'then   
                if check_tf=0 then 
                    r_arr_dv<='1';
                elsif check_tf=1 then
                    check_tf:=0;
                    w_SM<=s_R1;
                end if;
            else    
                r_arr_dv<='0';
                check_tf:=1;   
            end if;
          
          when s_R1 =>
            r_arr_S0<=arr_S0(3);
            r_arr_S1<=arr_S1(3);
            r_arr_S2<=arr_S2(3);
            r_arr_S3<=arr_S3(3);
            r_de_ADD<=1;
            
            if i_status_transfer='0'then   
                if check_tf=0 then 
                    r_arr_dv<='1';
                elsif check_tf=1 then
                    check_tf:=0;
                    w_SM<=s_R2;
                end if;
            else    
                r_arr_dv<='0';
                check_tf:=1;   
            end if;
           
           when s_R2 =>
            r_arr_S0<=arr_S0(2);
            r_arr_S1<=arr_S1(2);
            r_arr_S2<=arr_S2(2);
            r_arr_S3<=arr_S3(2);
            r_de_ADD<=2;
            
            if i_status_transfer='0'then   
                if check_tf=0 then 
                    r_arr_dv<='1';
                elsif check_tf=1 then
                    check_tf:=0;
                    w_SM<=s_R3;
                end if;
            else    
                r_arr_dv<='0';
                check_tf:=1;   
            end if;
          
         when s_R3 =>
            r_arr_S0<=arr_S0(1);
            r_arr_S1<=arr_S1(1);
            r_arr_S2<=arr_S2(1);
            r_arr_S3<=arr_S3(1);
            r_de_ADD<=3;
            
            if i_status_transfer='0'then   
                if check_tf=0 then 
                    r_arr_dv<='1';
                elsif check_tf=1 then
                    check_tf:=0;
                    w_SM<=s_R4;
                end if;
            else    
                r_arr_dv<='0';
                check_tf:=1;   
            end if;
         
          when s_R4 =>
            r_arr_S0<=arr_S0(0);
            r_arr_S1<=arr_S1(0);
            r_arr_S2<=arr_S2(0);
            r_arr_S3<=arr_S3(0);
            r_de_ADD<=4;
            
            if i_status_transfer='0'then   
                if check_tf=0 then 
                    r_arr_dv<='1';
                elsif check_tf=1 then
                
                    if i<5999999 then
                        o_led_blink<='1';
                        i:=i+1;
                    else    
                        o_led_blink<='0';
                        i:=0;
                   
                        check_tf:=0;
                        w_SM<=s_Idle;
                     end if;
                end if;
            else    
                r_arr_dv<='0';
                check_tf:=1;   
                
                
            end if;   
            
    end case;                                    
end if;

end process TRANS_SEC;

o_arr_S0<=r_arr_S0;
o_arr_S1<=r_arr_S1;
o_arr_S2<=r_arr_S2;
o_arr_S3<=r_arr_S3;

o_de_ADD<=r_de_ADD;
o_arr_dv<=r_arr_dv;

end Behavioral;
